/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.customer.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.customer.model.Customer;
import com.customer.model.CustomerModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Customer service. Represents a row in the &quot;customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link CustomerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CustomerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see CustomerImpl
 * @see Customer
 * @see CustomerModel
 * @generated
 */
@ProviderType
public class CustomerModelImpl extends BaseModelImpl<Customer>
	implements CustomerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the {@link Customer} interface instead.
	 */
	public static final String TABLE_NAME = "customer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "cid", Types.BIGINT },
			{ "cusername", Types.VARCHAR },
			{ "cpass", Types.VARCHAR },
			{ "cname", Types.VARCHAR },
			{ "cemail", Types.VARCHAR },
			{ "cmobile", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cid", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("cusername", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cpass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cname", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cemail", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cmobile", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table customer (cid LONG not null primary key,cusername VARCHAR(75) null,cpass VARCHAR(75) null,cname VARCHAR(75) null,cemail VARCHAR(75) null,cmobile VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table customer";
	public static final String ORDER_BY_JPQL = " ORDER BY customer.cid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY customer.cid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.customer.service.util.PropsUtil.get(
				"value.object.entity.cache.enabled.com.customer.model.Customer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.customer.service.util.PropsUtil.get(
				"value.object.finder.cache.enabled.com.customer.model.Customer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.customer.service.util.PropsUtil.get(
				"lock.expiration.time.com.customer.model.Customer"));

	public CustomerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Customer.class;
	}

	@Override
	public String getModelClassName() {
		return Customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("cid", getCid());
		attributes.put("cusername", getCusername());
		attributes.put("cpass", getCpass());
		attributes.put("cname", getCname());
		attributes.put("cemail", getCemail());
		attributes.put("cmobile", getCmobile());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long cid = (Long)attributes.get("cid");

		if (cid != null) {
			setCid(cid);
		}

		String cusername = (String)attributes.get("cusername");

		if (cusername != null) {
			setCusername(cusername);
		}

		String cpass = (String)attributes.get("cpass");

		if (cpass != null) {
			setCpass(cpass);
		}

		String cname = (String)attributes.get("cname");

		if (cname != null) {
			setCname(cname);
		}

		String cemail = (String)attributes.get("cemail");

		if (cemail != null) {
			setCemail(cemail);
		}

		String cmobile = (String)attributes.get("cmobile");

		if (cmobile != null) {
			setCmobile(cmobile);
		}
	}

	@Override
	public long getCid() {
		return _cid;
	}

	@Override
	public void setCid(long cid) {
		_cid = cid;
	}

	@Override
	public String getCusername() {
		if (_cusername == null) {
			return StringPool.BLANK;
		}
		else {
			return _cusername;
		}
	}

	@Override
	public void setCusername(String cusername) {
		_cusername = cusername;
	}

	@Override
	public String getCpass() {
		if (_cpass == null) {
			return StringPool.BLANK;
		}
		else {
			return _cpass;
		}
	}

	@Override
	public void setCpass(String cpass) {
		_cpass = cpass;
	}

	@Override
	public String getCname() {
		if (_cname == null) {
			return StringPool.BLANK;
		}
		else {
			return _cname;
		}
	}

	@Override
	public void setCname(String cname) {
		_cname = cname;
	}

	@Override
	public String getCemail() {
		if (_cemail == null) {
			return StringPool.BLANK;
		}
		else {
			return _cemail;
		}
	}

	@Override
	public void setCemail(String cemail) {
		_cemail = cemail;
	}

	@Override
	public String getCmobile() {
		if (_cmobile == null) {
			return StringPool.BLANK;
		}
		else {
			return _cmobile;
		}
	}

	@Override
	public void setCmobile(String cmobile) {
		_cmobile = cmobile;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Customer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Customer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Customer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CustomerImpl customerImpl = new CustomerImpl();

		customerImpl.setCid(getCid());
		customerImpl.setCusername(getCusername());
		customerImpl.setCpass(getCpass());
		customerImpl.setCname(getCname());
		customerImpl.setCemail(getCemail());
		customerImpl.setCmobile(getCmobile());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public int compareTo(Customer customer) {
		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Customer)) {
			return false;
		}

		Customer customer = (Customer)obj;

		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Customer> toCacheModel() {
		CustomerCacheModel customerCacheModel = new CustomerCacheModel();

		customerCacheModel.cid = getCid();

		customerCacheModel.cusername = getCusername();

		String cusername = customerCacheModel.cusername;

		if ((cusername != null) && (cusername.length() == 0)) {
			customerCacheModel.cusername = null;
		}

		customerCacheModel.cpass = getCpass();

		String cpass = customerCacheModel.cpass;

		if ((cpass != null) && (cpass.length() == 0)) {
			customerCacheModel.cpass = null;
		}

		customerCacheModel.cname = getCname();

		String cname = customerCacheModel.cname;

		if ((cname != null) && (cname.length() == 0)) {
			customerCacheModel.cname = null;
		}

		customerCacheModel.cemail = getCemail();

		String cemail = customerCacheModel.cemail;

		if ((cemail != null) && (cemail.length() == 0)) {
			customerCacheModel.cemail = null;
		}

		customerCacheModel.cmobile = getCmobile();

		String cmobile = customerCacheModel.cmobile;

		if ((cmobile != null) && (cmobile.length() == 0)) {
			customerCacheModel.cmobile = null;
		}

		return customerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{cid=");
		sb.append(getCid());
		sb.append(", cusername=");
		sb.append(getCusername());
		sb.append(", cpass=");
		sb.append(getCpass());
		sb.append(", cname=");
		sb.append(getCname());
		sb.append(", cemail=");
		sb.append(getCemail());
		sb.append(", cmobile=");
		sb.append(getCmobile());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("com.customer.model.Customer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>cid</column-name><column-value><![CDATA[");
		sb.append(getCid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cusername</column-name><column-value><![CDATA[");
		sb.append(getCusername());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cpass</column-name><column-value><![CDATA[");
		sb.append(getCpass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cname</column-name><column-value><![CDATA[");
		sb.append(getCname());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cemail</column-name><column-value><![CDATA[");
		sb.append(getCemail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>cmobile</column-name><column-value><![CDATA[");
		sb.append(getCmobile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Customer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Customer.class
		};
	private long _cid;
	private String _cusername;
	private String _cpass;
	private String _cname;
	private String _cemail;
	private String _cmobile;
	private Customer _escapedModel;
}